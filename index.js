import "dotenv/config";
import { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session } from "grammy";
import { getRandomQuestions, getCorrectAnswer } from "./utils.js";
const bot = new Bot(process.env.BOT_API_KEY);

function initial() {
    return { randomIndex: null };
  }

  bot.use(session({ initial }));

//—Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  const keyboard = new Keyboard()
    .text("HTML")
    .text("CSS")
    .row()
    .text("JavaScript")
    .text("Vue")
    .row()
    .text("–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    .resized();

  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø <b>Frontend Interview Bot</b>\n –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É!",
    { parse_mode: "HTML" }
  );

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π üëá", {
    reply_markup: keyboard,
  });
});
// ----------

//–≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–æ–π
bot.hears(["HTML", "CSS", "JavaScript", "Vue", "–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"], async (ctx) => {
  const question = getRandomQuestions(ctx);
  let inlineKeyboard;
  //–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ - –æ—Ç—Ä–∞–∑–∏—Ç—å –∏—Ö
  if (question?.hasOptions) {
    const buttonRow = question.options.map((i) => InlineKeyboard.text(
          i.text,
          JSON.stringify({
            type: `${question?.type}-option`,
            questionId: question?.id,
            isCorrect: i.isCorrect,
          })
        ),
    );
    inlineKeyboard = InlineKeyboard.from([buttonRow]);
  } else { //–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –æ—Ç—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
    inlineKeyboard = new InlineKeyboard().text(
      "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç",
      JSON.stringify({
        type: question?.type,
        questionId: question?.id,
      })
    );
  }
  await ctx.reply(
    `–í–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${question?.type}:\n\n${question?.text}`,
    { reply_markup: inlineKeyboard }
  );
});
// ------

//–æ—Ç—Å–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
bot.on("callback_query:data", async (ctx) => {
    const cbData = JSON.parse(ctx.callbackQuery.data)
    const correctAnswer = getCorrectAnswer(cbData.questionId, cbData.type)
    
    if(cbData.type.includes('option')) {
        if(cbData.isCorrect) {
            await ctx.reply("–í–µ—Ä–Ω–æ üëç")
        } else {
            await ctx.reply(`–ù–µ –≤–µ—Ä–Ω–æ ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n"${correctAnswer}"` )
        }
    } else {
        await ctx.reply(correctAnswer, {disable_web_page_preview: true} )
    }
    await ctx.answerCallbackQuery()
});
// -----------------

//–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});
// ------------
bot.start();
